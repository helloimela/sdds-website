{
  "menus": [
    {
      "id": "4",
      "url": "components",
      "title": "Components",
      "contents": [
        {
          "content": {
            "id": "39",
            "title": "Components",
            "text": "Some text goes here"
          },
          "template": {
            "id": "5",
            "title": "List subpages",
            "text": "<!-- Temporarly we put this div containing \"Article text template\" \nin here. We will remove this later, when we rewrite tab setup -->\n<div> \n  <h1>{{item.content.title}}</h1>\n  <article>\n    <p [innerHTML]='item.content.text | markdown'></p>\n  </article>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-3\" *ngFor=\"let sub of content.submenus; index as i;\">\n    <a [routerLink]=\"sub.url\" class=\"card\">\n      <div class=\"card-body p-0\">\n        <img alt=\"{{sub.title}}\" />\n      </div>\n      <div class=\"card-footer\">{{sub.title}}</div>\n    </a>\n  </div>\n</div>"
          }
        }
      ],
      "submenus": [
        {
          "title": "Alert",
          "url": "alert"
        },
        {
          "title": "Buttons",
          "url": "buttons"
        },
        {
          "title": "Cards",
          "url": "cards"
        },
        {
          "title": "Badge",
          "url": "badge"
        },
        {
          "title": "Breadcrumbs",
          "url": "breadcrumbs"
        },
        {
          "title": "Pagination",
          "url": "pagination"
        },
        {
          "title": "Button groups",
          "url": "button-groups"
        },
        {
          "title": "Dropdown",
          "url": "dropdown"
        },
        {
          "title": "Forms",
          "url": "form"
        },
        {
          "title": "Input groups",
          "url": "input-groups"
        },
        {
          "title": "Media Objects",
          "url": "media-objects"
        },
        {
          "title": "Modals",
          "url": "modals"
        },
        {
          "title": "Navs",
          "url": "navs"
        },
        {
          "title": "Progress indicators",
          "url": "progress-indicators"
        }
      ]
    },
    {
      "id": "2",
      "url": "home",
      "title": "Home",
      "contents": [
        {
          "content": {
            "id": "37",
            "title": "Scania Digital Design System",
            "text": "<p class='lead'>Digital design standards and resources that enable designers and developers to deliver a premium brand experience.</p>\n<h2><a href='https://digitaldesign.scania.com/resources/design/UIkit.xd'><c-icon name='scania-save'></c-icon>Download Adobe XD UI Kit</a>\n</h2>\n<h2>\n<a href='https://github.com/scania/corporate-ui' target='_blank'><c-icon name='scania-external_link'></c-icon>Github for Developers</a>\n</h2>"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "21",
      "url": "getting-started",
      "title": "Getting Started",
      "contents": [
        {
          "content": {
            "id": "43",
            "title": "Getting Started",
            "text": "Coming soon!"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "23",
      "url": "contribution",
      "title": "Contribution",
      "contents": [
        {
          "content": {
            "id": "46",
            "title": "Contribution",
            "text": "Coming soon!"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "24",
      "url": "new",
      "title": "What's new",
      "contents": [
        {
          "content": {
            "id": "47",
            "title": "What's new",
            "text": "Coming soon!"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "18",
      "url": "ux-design-principles",
      "title": "UX Design principles",
      "contents": [
        {
          "content": {
            "id": "18",
            "title": "UX Design principles",
            "text": "User/Human Centered Design\n\nUser/Human-centered design is about creating products that will bring value to the users and the business. It is the users who will interact with the proposed product/solution, and it is the job of the designer to know the potential target audience. Designers must conduct user research to get a sense of user needs, wants, and behaviours as the first step of the design process.\nAt the same time, it is vital to Keep the user in control with updated system status, direct and effective UI manipulations, instant feedbacks and expectable interactions and outcomes.\nKISS (Keep It Simple Stupid)\n\nKISS is a fundamental user interface design principle. Users will feel most comfortable if they can use the product without putting in much efforts. \n\nAutonomy\nUsers perceive that they are always in control when interacting with the product/solution.\n•\tEnable users to make their own decisions (e.g. with respect to navigation/interaction) when interacting with the product/solution\n\n•\tUse status indicators to keep users aware and informed\n\n•\tKeep status information up to date and easy to view and comprehend\n\n•\tEnsure that status information is accurate\n\nEfficiency of the User\n•\tThe efficiency in a product/solution is a result of the fundamental architecture of the system, not in the surface design of the interface\n•\tUser Error messages that help users in making sense of the status of the product/solution\nAesthetics\nUsers often perceive aesthetically pleasing design as design that’s more usable.\n•\tAesthetic design should be left to those schooled and skilled in its application: Graphic/visual designers\n•\tCosmetics should never trump usability\n•\tConduct user test the visual design as thoroughly as the behavioural design\n\nSimplicity\n•\tUse progressive revelation of the UI to flatten the learning curve\n•\tSimplification does not mean elimination of necessary capabilities\nLearnability: take advantage of user’s familiarity\n•\tJacob’s law - take advantages of user’s previous knowledge (existing mental models): Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know.\nConsistency \nA. Levels of Consistency\n•\tThink of consistency at various levels. For example-\n\n1.\tTop level consistency\no\tPlatform consistency:  Consistent with guidelines and standards \no\tIn-house consistency:  Consistent with look & feel across your products/services \n2. Consistency across a suite of products, e. g., Microsoft Office\n    \tGeneral look & feel communicates across the family of a product/solution\n3. The overall look & feel of a single app, application or service–splash screens, design elements, etc.\n4. Small visible structures, such as icons, symbols, buttons, scroll bars, etc.\n5. Invisible elements\nObjects that convey information, rather than being used to generate information, should not be made invisible\nB. Induced Inconsistency\n•\tvisual consistency should be tied up with behaviour of the UI elements. i.e., be visually consistent when UI elements behave in the same manner and inconsistent when UI elements behave differently.\n\nC. Consistency with User Expectation\n\n•\tBe consistent with expectations of the users of the product/solution\n\nReduce short-term memory load (cognitive load)\n\nAs human short term memory is only capable of retaining 5 to 7 items at a given time, make sure that this is incorporated judiciously into UI design.\n\nForgiveness\n•\tMust ensure that users never lose their work – permit reversal of action\nError handling\n•\tAny errors should be communicated in a human centred manner\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "19",
      "url": "ui-design-principles",
      "title": "UI Design principles",
      "contents": [
        {
          "content": {
            "id": "19",
            "title": "UI Design principles",
            "text": "Readability\n•\tText to be read should have high contrast and adequate line spacing\n•\tChoice of fonts and font sizes should be made with consideration of readability vis a vis size of the display \n\n•\tTest all designs on your oldest expected user population\nDiscoverability\n•\tIf the user cannot find it, it does not exist\n•\tUse AD (Active Discovery) to guide people to more advanced features\n•\tUI elements necessary for the successful use of product/solution should be visibly accessible at all times\n•\tCommunicate your gestural vocabulary with visual diagrams\n•\tStrive for Balance\n•\tUser-test for discoverability\nExplorable Interfaces\n•\tGive users well-marked navigational structure\n•\tOffer users stable perceptual cues for a sense of “home”\n•\tMake Actions reversible or Always allow “Undo”\n•\tAlways allow a way out\n•\tMake it easy and attractive to stay in\nClarity\nClarity is the one of the key features of a UI. As per Ben Shneiderman for an interface to be effective and user-friendly, it must be recognizable, predictable, and have an obvious purpose.\n\nState\n•\tAs many of browser-based products/solutions exist in a stateless environment, tracking status must be designed in a suitable manner\n•\tMake clear to the user regarding the information that will stored & and that it will be protected\nFeedback\n•\tProvide timely and contextually-relevant feedback to the user.\n•\tFeedback can be visual, auditory or haptic as required.\nLatency Reduction\n•\tKeep users informed when they face delay\nAnticipation\n\n•\tMake visible to the user all UI elements needed for each step of the process\n\nUse of Metaphors\n•\tChoose metaphors that will enable users to comprehend the finest details of the conceptual model of the product/solution\n•\tMust go beyond literal interpretation of real-world counterparts\nHuman Interface Objects\n•\tHuman-interface objects are easy to perceive and act upon\n•\tHuman-interface objects have a standard way of being manipulated\n•\tHuman-interface objects have standard resulting behaviours\n\n•\tUse a new object when a new modality of interaction is introduced\n\nPurposeful page layout\n\n•\tBe judicious about the  spatial relationships between items on the page and structure the page based on importance. \n\nVisible Navigation\n•\tMake navigation visible\n•\tLimit number of navigation items by using overlays\nColour\nColour blindness\n•\tWhen colour is used to convey information in the interface, use clear, secondary cues to convey the information to those who cannot see the colours presented.\n•\tTest your site to see with colour blind users\n\nColour as a vital interface element\n\n•\tUser colour judiciously in UI \n\nFitts’s Law\n•\tThe time to acquire a target is a function of the distance to and size of the target\n•\tFitts’s Law is in effect regardless of the kind of pointing device or the nature of the target\n•\tFitts’s Law requires a stop watch test\nLaw of common region\nElements tend to be perceived into groups if they located within a clearly defined boundary.\nLaw of Proximity\nObjects that are proximate to each other tend to be grouped together.\nMiller’s Law\nThe average person can only keep 7 (plus or minus 2) items in their working memory.\nVon Restorff Effect\nThe Von Restorff effect, also known as The Isolation Effect, predicts that when multiple similar objects are present, the one that differs from the rest is most likely to be remembered.\n\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "17",
      "url": "foundation",
      "title": "Foundations",
      "contents": [
        {
          "content": {
            "id": "42",
            "title": "Foundations",
            "text": "Coming soon"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": [
        {
          "title": "UX Design principles",
          "url": "ux-design-principles"
        },
        {
          "title": "UI Design principles",
          "url": "ui-design-principles"
        }
      ]
    },
    {
      "id": "3",
      "url": "support",
      "title": "Support",
      "contents": [
        {
          "content": {
            "id": "36",
            "title": "Support",
            "text": "Need help within development or with Components?\nPlease start by visiting the Components section or visit FAQ and see if your question already has an answere.\nIf that doesn't help, reach out in Teams where others users might be able to help you or post an issue in our Development GitHub if you have experienced a bug.\n\nNeed help within the design area? \nWe can't design your application for you but we'll happily guide you through how you can use the different sections and Tools in the Scania Design System.\nPlease get in touch with us through Teams and we'll do our best to help out."
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "22",
      "url": "Design Patterns",
      "title": "Design Patterns",
      "contents": [
        {
          "content": {
            "id": "44",
            "title": "Patterns",
            "text": "Coming soon!"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "25",
      "url": "http://www.google.com",
      "title": "test",
      "contents": [],
      "submenus": []
    },
    {
      "id": "11",
      "url": "dropdown",
      "title": "Dropdown",
      "contents": [
        {
          "content": {
            "id": "26",
            "title": "Dropdown",
            "text": "Dropdown\nA dropdown is a type of menu that presents a list of option to the user and allows them to choose one of more to take action.\ndesign guidelines\n-\tUse a button to toggle the menu. The button can be labelled with text or an icon that is easy to understand.\n-\tMenu items to be ordered by usage\n-\tmake sure that the text is short and concise. Long menus are truncated with ellipsis added\n-\tNested menus can be used when necessary – up to three levels.\n-\tdisable menu(s) if needed\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "12",
      "url": "form",
      "title": "Forms",
      "contents": [
        {
          "content": {
            "id": "27",
            "title": "Forms",
            "text": "Forms\nForms is a modality of collecting inputs from the user and submitting it to an application.\ndesign guidelines\n-\tForms are constituted of text and input elements such as, checkboxes, dropdowns, radio buttons, toggle switches etc. Forms should be clear and concise to make it easy for users to complete forms.\n-\tUse one column to organise the form. \n-\tGroup input elements that are similar. This makes it easy for users to scan them.\n-\tForms should not be longer than a page – ideally. However, if a forms need to be longer, use pagination.\n-\tForms must let users know when something is wrong with the information provided. Error message styling, content and location should make it easy for users to understand where they have made errors (exact styling to be decided).\n-\tBoth real-time as well as after post validation can be done as appropriate.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "13",
      "url": "input-groups",
      "title": "Input groups",
      "contents": [
        {
          "content": {
            "id": "28",
            "title": "Input groups",
            "text": "Input groups\nInput groups are used to extend input elements (such as radio buttons, check boxes etc.) within a form. (more details are to be added).\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "14",
      "url": "media-objects",
      "title": "Media Objects",
      "contents": [
        {
          "content": {
            "id": "31",
            "title": "Media Objects",
            "text": "Media objects\nTo be decided.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "15",
      "url": "modals",
      "title": "Modals",
      "contents": [
        {
          "content": {
            "id": "32",
            "title": "Modals",
            "text": "Modals\nModals assist users in completing a task that requires an action by the user.\ndesign guidelines\n \n-\tFocus – modals requires user’s full attention and therefore, the focus needs to shift to the modal to enable user interaction.\n-\tUsers need to take action about a modal – either to take action or to cancel/dismiss it\n-\tModels should not launch other modals\n-\tdo not use scrolling with a modal as far as possible\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "16",
      "url": "navs",
      "title": "Navs",
      "contents": [
        {
          "content": {
            "id": "33",
            "title": "Navs",
            "text": "Navs\nnavigation panel is a collection of links – organized in a horizontal or vertical manner.\ndesign guidelines\n-\tto be decided\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "5",
      "url": "buttons",
      "title": "Buttons",
      "contents": [
        {
          "content": {
            "id": "40",
            "title": "Primary button",
            "text": "<button type='button' class='btn btn-primary'>Primary</button>\n-\n<button type='button' class='btn btn-primary' disabled>Primary</button>"
          },
          "template": {
            "id": "2",
            "title": "Code",
            "text": "<section class='container' code-example [example]='item.content' toggleCode='true'></section>"
          }
        },
        {
          "content": {
            "id": "23",
            "title": "Buttons",
            "text": "Buttons\nButtons are a mode for inputting user action for communicating user’s intention.\nButtons are not the same as links – links are not input modes but it is a mode for navigation – from one page to another page or from one view to another view.\n\nTypes of Buttons\n-\tSolid button: meant for primary action, solid filled to attract user’s attention\n-\tOutline button: meant for secondary action and to compliment primary action\n-\tFlat button: meant for tertiary action\n-\tDisabled button: meant to prevent users from sending inputs accidently, also meant to prevent input till conditions for the input are met.\n-\tEllipsis button: meant for indicating that several tasks are available for users to take action\ndesign guidelines\n-\tPlacement – two distinct patterns can be used to place buttons\n \n \n-\tBehaviour (‘feel’)\nButtons to simulate clicking action that is visualised by means of change in colour/shade\n-\tStyle of buttons to follow the style guide\nThe text inside of buttons to be always UPPERCASE. Descriptive language relating to the intent of the user should be used to formulate button text.\n-\tvisual style\nBorder radius - ?\nSize and proportions - ?\nColour\n\tPrimary colour – Scania Blue – to provide consistency across all applications\nAction based colour – green or red – to provide an all clear message or a warning to the user.\nDisabled button colour – grey \nIcons\nIcons – that clearly communicate the intent for action – can be used in place of text for a button\nWhen icons are accompanied with text, it follows the icon (i.e. icon first and then the text)\nTitle attribute – a tooltip to be visible when hovering a button (where necessary). The text is displayed below the button.\nIcons can be used with any kind of buttons mentioned above.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "20",
      "url": "progress-indicators",
      "title": "Progress indicators",
      "contents": [
        {
          "content": {
            "id": "35",
            "title": "Progress indicators",
            "text": "Progress Indicators\nProgress (bar or another form) is used to depict progress of a task e.g. downloading content. \ndesign guidelines\n-\tProgress element need to convey the time – the time required for the task to be finished. \n-\tProgress elements need to be animated to convey the sense of progress.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "1",
      "url": "alert",
      "title": "Alert",
      "contents": [
        {
          "content": {
            "id": "20",
            "title": "Alerts",
            "text": "Alerts\nAlerts are banners/modals that communicate a message with a degree of urgency attached to it.\nThere are two key types of alerts: standard alerts and application level alerts\ndesign guidelines: standard alerts\n-\tAlerts are to be designed to garb user’s attention to provide critical information needed in a context of use.\n-\tStandard Alerts, in general, are four types:\n\n1.\tSuccess Alert\nThe banner/modal carries a message communicating to the user that the action taken by them have been successful. \nThe banner/modal carries a green encircled check mark to visually accentuate the success message. The banner/modal itself should have a neutral colour (grey/white).\n2.\tinformation Alert\nThe banner/modal carries a message communicating to the user that additional information is available about the context of use. \nThe banner/modal carries a black encircled exclamation mark to visually accentuate the success message. The banner/modal itself should have a neutral colour (grey/white).\n3.\twarning alert\nThe banner/modal carries a message communicating to the user that the action taken by them have resulted in a warning with respect to the context of use. \nThe banner/modal carries a yellow outlined triangle with exclamation mark to visually accentuate the success message. The banner/modal itself should have a neutral colour (grey/white).\n4.\terror alert\nThe banner/modal carries a message communicating to the user that the action taken by them have resulted in an error with respect to the context of use. \nThe banner/modal carries red encircled cross mark to visually accentuate the success message. The banner/modal itself should have a neutral colour (grey/white).\n-\tStandard alerts convey severity and urgency in the following order: error, warning, info and success.\nIn case there are multiple subtypes (of each of the types mentioned above) all of them are shown before another standard alert type is shown. For example – multiple error warnings are shown before a warning alert is shown.\n-\tsize?\n-\tPlacement of alert \n\nStandard alerts could be place in multiple contexts including inside of components. \n\n-\tApplication level alerts are of three types: error, warning and info.\n-\tApplication level alerts follow the same order as standard level alerts: error, warning and info.\n-\tsize?\n-\tplacement?\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        },
        {
          "content": {
            "id": "41",
            "title": "Alert examples",
            "text": "<div class='alert alert-success' role='alert'>\n  A simple success alert—check it out!\n</div>\n-\n<div class='alert alert-danger' role='alert'>\n  A simple danger alert—check it out!\n</div>\n-\n<div class='alert alert-warning' role='alert'>\n  A simple warning alert—check it out!\n</div>\n-\n<div class='alert alert-info' role='alert'>\n  A simple info alert—check it out!\n</div>"
          },
          "template": {
            "id": "2",
            "title": "Code",
            "text": "<section class='container' code-example [example]='item.content' toggleCode='true'></section>"
          }
        },
        {
          "content": {
            "id": "45",
            "title": "Styling",
            "text": "Styling section coming soon!"
          },
          "template": {
            "id": "6",
            "title": "Style",
            "text": "Coming soon!"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "6",
      "url": "cards",
      "title": "Cards",
      "contents": [
        {
          "content": {
            "id": "25",
            "title": "Cards",
            "text": "Cards\nA card presents content and actions on a single topic.\ndesign guidelines\n-\teasy to understand content about a topic\n-\tconsider cards as an entry point to more details\n-\tkeep the content simple and easy to understand\n-\tcall to action – user primary action and a single additional action (if required). The placement of call to action if located on the card footer, left aligned (supports F-pattern layout).\n\n \n-\tNot all cards are to be clickable. When a card is clickable, the resulting action should be an expected outcome – to navigate to more details.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "7",
      "url": "badge",
      "title": "Badge",
      "contents": [
        {
          "content": {
            "id": "21",
            "title": "Badges",
            "text": "Badges\n\nBadges are used to highlight count (numerical value) associated with and item/event.\n\ndesign guidelines\n\n-\tBadges to have a colourful, bold and filled style to enable them to stand out when appearing within or next to a UI element.\n-\tUser integers with badges.\n\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "8",
      "url": "breadcrumbs",
      "title": "Breadcrumbs",
      "contents": [
        {
          "content": {
            "id": "22",
            "title": "Breadcrumbs",
            "text": "Breadcrumbs\nBreadcrumbs are a navigational element to support wayfinding. It makes users of their current location (with respect to the application/website) and the option for further navigation. Breadcrumbs also show hierarchy of the navigation and allows users to navigate higher or lower in the hierarchy. Breadcrumbs are essentially links for navigation.\ndesign guidelines\n-\tBreadcrumbs should not replace global navigation or location navigation (in a section) but complement it.\n-\tBreadcrumbs should display the current location of the user with respect to hierarchy of navigational structure.\n-\tBreadcrumb corresponding the current page should not be a link.\n-\tBreadcrumbs are more useful for application/websites where the hierarchy if deeper than 2 levels. That is, it is not suitable for applications/sites that are have flat hierarchy.\n-\tBreadcrumb should start with link to home page.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "9",
      "url": "pagination",
      "title": "Pagination",
      "contents": [
        {
          "content": {
            "id": "34",
            "title": "Pagination",
            "text": "Pagination\nPagination is a collection of links that allows users to navigated between pages.\ndesign guidelines\n-\tPagination must makes clear to the user the page they are on currently and the options or navigating to other pages (both before the page or after the pages) is clearly visible to them.\n-\tUser roman numerals to indicate pages.\n-\tWhen working with high number of pages, links to go forward and backward along with links for first and last page to be shown.\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    },
    {
      "id": "10",
      "url": "button-groups",
      "title": "Button groups",
      "contents": [
        {
          "content": {
            "id": "24",
            "title": "Button groups",
            "text": "Buttons groups\nButtons groups are collection of same type of buttons.\ndesign guidelines\nButton groups follow button design guidelines.\nTypes of Button groups\n-\tSolid button group: meant for primary action, solid filled to attract user’s attention\n-\tOutline button group: meant for secondary action and to compliment primary action\n-\tFlat button group: meant for tertiary action\n-\tDisabled button group: meant to prevent users from sending inputs accidently, also meant to prevent input till conditions for the input are met.\nButton groups can be constituted of the following:\n-\tmixed classes\no\tmixing actions\n\n \no\tmixing styles\n\n \n\n-\tIcons – width and spacing\n\n   \n\n-\tOverflow\n\nTo be used when the button group is larger than space available or there is intention to save space. In such cases, an ellipsis button is included in the button group that shows the overflow drop down menu.\n\n \n\n \n\n \n\n \n \n\n"
          },
          "template": {
            "id": "1",
            "title": "Usage",
            "text": "<h1>{{item.content.title}}</h1><p [innerHTML]='item.content.text | markdown | keepHtml'></p>"
          }
        }
      ],
      "submenus": []
    }
  ]
}